@using Seal.Model
@using Seal.Helpers

@{
    Report report = Model;
    ReportView view = report.CurrentView;
    ReportView modelView = report.CurrentModelView;
    ReportModel reportModel = modelView.Model;
    ResultPage page = report.CurrentPage;
    int serieIndex = 0;
}

@if (reportModel.HasChartJSSerie && page.Series.Count > 0 && modelView.GetBoolValue("show_charts"))
{
    <!--Chart JS-->
    bool chartOk = false;
    string chartId = "cjs" + Guid.NewGuid().ToString().Replace("-", "");
    if (modelView.InitPageChart(page))
    {
        string chartType = reportModel.ExecChartJSType;
        if (chartType == "pie" && view.GetBoolValue("chartjs_doughnut"))
        {
            chartType = "doughnut";
			if (view.GetBoolValue("chartjs_doughnut_with_text"))
			{
				chartType = "doughnutWithText";
			}
        }
        
		<div class="chart-container" style="page-break-inside:avoid; @(view.GetBoolValue("chartjs_responsive") ? "position:relative;" : "") @Helper.AddIfNotEmpty("width:", view.GetValue("chartjs_contwidth"), ";")@Helper.AddIfNotEmpty("height:", view.GetValue("chartjs_contheight"), ";")">
			<canvas id="@chartId" @Raw(Helper.AddIfNotEmpty("width='", view.GetValue("chartjs_width"), "'")) @Raw(Helper.AddIfNotEmpty("height='", view.GetValue("chartjs_height"), "'"))></canvas>
		</div>
        <script>
            $(document).ready(function () {
            var ctx = $("#@chartId");
            var data = {
                labels: [@Raw(page.ChartXLabels)],
                datasets: [
                    @{
						var serie = page.Series.FirstOrDefault(i => i.Element.ChartJSSerie != ChartJSSerieDefinition.None);
						if (serie != null)
						{
							<text>
							{
								labels: [@Raw(page.ChartXLabels)],
								label: '@Raw(Helper.ToJS(serie.SerieDisplayName))',
								data: [@Raw(serie.ChartYSerieValues)],
								backgroundColor: @Raw(view.GetValue("chartjs_colors"))								
							},
							</text>
						}
                    }
                ]
            };
            var options = {
                responsive: @Helper.ToJS(view.GetBoolValue("chartjs_responsive")),
                maintainAspectRatio: @Helper.ToJS(view.GetBoolValue("chartjs_maintainratio")),
                legend: {
                    display: @Helper.ToJS(view.GetBoolValue("chartjs_show_legend")),
                    position: '@view.GetValue("chartjs_legend_position")'
                },
                title: {
                    display: @Raw(Helper.ToJS(!string.IsNullOrEmpty(view.GetValue("chartjs_title")))),
                    text: '@Raw(Helper.ToJS(modelView.GetTranslatedMappedLabel(view.GetValue("chartjs_title"))))',
                    position: '@view.GetValue("chartjs_title_position")'
                },
                layout: {
                    padding: {
                        @view.GetValue("chartjs_padding")
                    }
                },
				circumference: @Raw(view.GetParameter("chartjs_options_circumference").Value),
				rotation: @Raw(view.GetParameter("chartjs_options_rotation").Value),
                tooltips: {
                    callbacks: {
                        label: function (tooltipItem, data) {
                            var allData = data.datasets[tooltipItem.datasetIndex].data;
                            var tooltipLabel = data.labels[tooltipItem.index];
                            var tooltipData = allData[tooltipItem.index];
                            var format = (data.datasets[tooltipItem.datasetIndex].yAxisID == 'yaxis-2' ? '@reportModel.ExecD3SecondaryYAxisFormat' : '@reportModel.ExecD3PrimaryYAxisFormat');
                            var isDate = (data.datasets[tooltipItem.datasetIndex].yAxisID == 'yaxis-2' ? @Helper.ToJS(reportModel.ExecAxisSecondaryYIsDateTime) : @Helper.ToJS(reportModel.ExecAxisPrimaryYIsDateTime));
                            var val = tooltipItem.@("y")Label;
                            var valStr = "";
                            if (isDate) valStr = d3.time.format(format)(new Date(val));
                            else valStr = d3.format(format)(Number(val)).valueFormat();

                            @if (reportModel.ExecChartJSType == "pie")
                            {
                                <text>
                                var total = 0;
                                for (var i in allData) total += allData[i];
                                if (isDate) valStr = d3.time.format(format)(new Date(tooltipData));
                                else {
                                    var tooltipPercentage = Math.round((tooltipData / total) * 100);
                                    valStr = d3.format(format)(Number(tooltipData)).valueFormat() + ' (' + tooltipPercentage + '%)';
                                }
                                return tooltipLabel + ': ' + valStr;
                                </text>
                            }
                            else
                            {
                                <text>
                                return valStr;
                                </text>
                            }
                        }
                    }
                }
            };

			var @chartId = new Chart(ctx, {
				type: '@chartType',
				data: data,
				options: options
			});
                // Navigation
			if (@Helper.ToJS(report.GenerateHTMLDisplay)) {
				$("#@chartId").click(
					function (evt) {
						var points = @(chartId).getElementsAtEvent(evt);
						if (points && points.length > 0) {
							var index = points[0]["_index"];
							var label = @(chartId).data.labels[index];
							var value = @(chartId).data.datasets[0].data[index];
							var nav = @(chartId).data.navigations[index];
							if (nav) showPopupNavMenu(evt, nav, true);
						}
					}
				);
			}
        });//document.ready
			
        </script>
        chartOk = true;
    }
    if (!chartOk)
    {
        <div class="alert alert-danger" role="alert">
            @Raw(Helper.ToHtml(view.Error))
        </div>
        view.Error = "";
    }
}
