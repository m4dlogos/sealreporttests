@using Seal.Model
@{
    ReportView view = Model;
    Report report = view.Report;
    ReportModel reportModel = view.Model;
    bool activeFirst = true;
}

@if (reportModel.SummaryTable != null && reportModel.SummaryTable.RowCount > 0 && view.GetBoolValue("show_summary_table"))
{
    activeFirst = false;
    <div class="tab-pane fade in active" id="@(view.ViewId + "_summary")">
        @Include(view.GetPartialTemplateKey("Model.iSummaryTable", view), view)
    </div>
    if (report.PrintLayout && view.GetBoolValue("print_break_after_page"))
    {
        <div style="page-break-after: always;"></div>
    }
}

@{
	string pagesLayout = view.GetValue("pages_layout");
	
	if (string.IsNullOrEmpty(pagesLayout))
	{
		foreach (ResultPage page in reportModel.Pages)
		{
			report.CurrentPage = page;
			if (report.PrintLayout && view.GetBoolValue("print_break_after_page") && page != reportModel.Pages[0])
			{
				<div style="page-break-after: always;"></div>
			}

			var className = "";
			if (reportModel.Pages.Count > 1 && !report.PrintLayout && view.GetValue("model_menu_type") != "none")
			{
				className = "tab-pane fade" + (activeFirst ? "in active": "");
				activeFirst = false;
			}

			<div class="container-fluid @className" id="@(view.ViewId + page.PageId)">
				@Raw(view.ParseChildren())

				@if (view.GetBoolValue("show_page_separator"))
				{
					<hr style="display: block;" />
				}
			</div>
		}
	}
	else
	{
		<div class="container-fluid">
			@{
				var pages = reportModel.Pages;
				int pageIndex = 0;
				
				foreach (string row in view.GetGridLayoutRows(pagesLayout.Trim()))
				{
					<div class="row">
						@foreach (string col in view.GetGridLayoutColumns(row))
						{
							<div class="@view.GetGridLayoutColumnClass(col)">
								@if (pageIndex < pages.Count && view.IsGridLayoutColumnForModel(col))
								{
									// Indiquer la page à traiter
									report.CurrentPage = pages[pageIndex];
									
									@Raw(view.ParseChildren())

									if (view.GetBoolValue("show_page_separator"))
									{
										<hr style="display: block;" />
									}
									
									// On passe à la page suivante
									++pageIndex;
								}
							</div>
						}
					</div>
				}
				//Remaining pages
				while (pageIndex < pages.Count)
				{
					<div class="row">
						@{
							report.CurrentPage = pages[pageIndex];								
							@Raw(view.ParseChildren())
							++pageIndex;
						}
					</div>
				}
			}
		</div>
	}
}
